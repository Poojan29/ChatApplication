@model IEnumerable<ChatApp.Models.Chat>
@{
    ViewBag.Title = "Chat";
    var receiver = @ViewBag.Receiver;
    var currentUser = @User.Identity?.Name;
}

<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" />

<style>
    body {
        background-color: #121212;
        color: white;
        font-family: sans-serif;
    }

    #chatBox {
        width: 100%;
        max-width: 600px;
        margin: 0 auto;
        font-family: sans-serif;
        overflow: hidden;
    }

    #chatWindow {
        height: 530px;
        overflow-y: scroll;
        padding: 10px;
    }

    .messageBox {
        margin: 10px 0;
        padding: 10px 15px;
        max-width: 75%;
        border-radius: 18px;
        clear: both;
        display: flex;
        word-wrap: break-word;
    }

    .timestamp {
        font-size: 8px;
    }

    .messageBox.sent {
        background-color: #e03e3e;
        float: right;
        text-align: right;
        align-items: center;
        direction: rtl;
    }

    .messageBox.received {
        background-color: rgb(165, 112, 112);
        float: left;
        text-align: left;
        align-items: center;
    }

    #inputArea {
        display: flex;
        align-items: center;
        padding: 10px;
        background-color: #2a2a2a;
        position: fixed;
        bottom: 0;
        width: 100%;
        max-width: 600px;
        margin: 10px auto;
        border-radius: 20px;
    }

    #inputArea input[type="file"] {
        display: none;
    }

    #inputArea input[type="text"] {
        width: 40%;
        padding: 10px;
        margin-right: 10px;
    }

    #inputArea button {
        padding: 10px 20px;
    }

    #sendBtn {
        background-color: #e03e3e;
        color: white;
        border: none;
        border-radius: 50%;
        width: 45px;
        height: 45px;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 18px;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    #sendBtn:hover {
        background-color: #1ebc59;
    }

    #attachBtn {
        font-size: 20px;
        cursor: pointer;
        margin-right: 10px;
        color: #e03e3e;
    }

    #msg {
        flex: 1;
        padding: 10px 15px;
        border: none;
        border-radius: 20px;
        outline: none;
        font-size: 16px;
        background-color: #fff;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }

    .welcome {
        display: flex;
        justify-content: space-between;
    }

    #chatWindow::-webkit-scrollbar {
        width: 8px;
    }

    #chatWindow::-webkit-scrollbar-track {
        background: #1e1e1e;
        border-radius: 10px;
    }

    #chatWindow::-webkit-scrollbar-thumb {
        background-color: #f44336;
        border-radius: 10px;
        border: 3px solid #1e1e1e;
    }
</style>

<div class="welcome">
    <h2>Chat with <span class="text-danger"> @receiver</span></h2>
    <a asp-action="Index" class="btn btn-danger mb-2">
        <i class="fa-solid fa-users"></i>
    </a>
</div>


<div class="mainWindow">
    <div id="chatBox">
        <div id="chatWindow">
            @foreach (var msg in Model)
            {
                string? decryptedMessage = EncryptionHelper.Decrypt(msg.Message);
                var cssClass = msg.ReceiverUsername == receiver ? "sent" : "received";
                var margin = msg.ReceiverUsername == receiver ? "ms-2" : "me-2";
                var senderName = msg.SenderUsername == currentUser ? "You" : msg.SenderUsername;
                <div class="messageBox @cssClass">
                    <div class="rounded-circle @margin bg-dark d-flex justify-content-center align-items-center"
                        style="width: 30px; height: 30px; font-size: 1rem;">
                        @currentUser?[0].ToString().ToUpper()
                    </div>
                    <div>
                        <strong>@senderName:</strong> @decryptedMessage
                        <div class="timestamp">@msg.Time</div>
                    </div>
                </div>
            }
        </div>

        <div id="inputArea">
            @using (Html.BeginForm("UploadImage", "Home", FormMethod.Post, new
            {
                enctype = "multipart/form-data",
                @id =
                        "uploadForm"
            }))
            {
                <label for="imageFile" id="attachBtn">
                    <i class="fa-solid fa-paperclip"></i>
                </label>
                <input type="file" name="imageFile" id="imageFile" accept="image/*"
                    onchange="document.getElementById('uploadForm').submit()" />
            }

            <input id="msg" type="text" placeholder="Type a message..." />
            <button id="sendBtn" type="submit">
                <i class="fa-solid fa-paper-plane"></i>
            </button>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/chathub")
            .build();

        const sender = '@User.Identity.Name';
        const receiver = '@ViewBag.Receiver';

        connection.on("ReceiveMessage", function (from, to, message, time) {
            location.reload();
            const isSentByYou = from === sender;
            const cssClass = isSentByYou ? 'sent' : 'received';
            const nameToShow = isSentByYou ? 'You' : from;
            const msgHtml = `<div class="messageBox "${cssClass}">
                                <div class="rounded-circle bg-dark d-flex justify-content-center align-items-center"
                                    style="width: 30px; height: 30px; font-size: 1rem;">
                                    @currentUser?[0].ToString().ToUpper()
                                </div>
                                <div>
                                    <strong>"${from}":</strong> "${message}"
                                    <div class="${timestamp}">"${time}</div>
                                </div>
                            </div>`;
            $('#chatWindow').append(msgHtml);
            $('#chatWindow').scrollTop($('#chatWindow')[0].scrollHeight);

        });

        connection.start().then(function () {
            document.getElementById("sendBtn").addEventListener("click", function (e) {
                e.preventDefault();

                const message = document.getElementById("msg").value.trim();
                const time = new Date().toLocaleTimeString();

                if (message) {
                    connection.invoke("SendMessage", sender, receiver, message, time)
                        .then(() => {
                            document.getElementById("msg").value = ""
                            location.reload();
                        })
                        .catch(err => console.error(err.toString()));
                }
            });
        }).catch(function (err) {
            return console.error("Connection failed:", err.toString());
        });

        $(window).on('load', function () {
            var chatWindow = $('#chatWindow');
            chatWindow.scrollTop(chatWindow[0].scrollHeight);
        });

    </script>
}
